deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
deviceData$relative_time <- (deviceData$systemTime - min(deviceData$systemTime))
deviceData <- deviceData[!duplicated(deviceData$relative_time), ]
deviceData$RightEyePupilSize[deviceData$RightEyePupilSize == -1] <- NA
deviceData$LeftEyePupilSize[deviceData$LeftEyePupilSize == -1] <- NA
deviceData <- deviceDataList[[3]]
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
deviceData$relative_time <- (deviceData$systemTime - min(deviceData$systemTime))
deviceData <- deviceData[!duplicated(deviceData$relative_time), ]
deviceData$RightEyePupilSize[deviceData$RightEyePupilSize == -1] <- NA
deviceData$LeftEyePupilSize[deviceData$LeftEyePupilSize == -1] <- NA
deviceData <- deviceDataList[[3]]
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
deviceData$relative_time <- (deviceData$systemTime - min(deviceData$systemTime))
deviceData <- deviceData[!duplicated(deviceData$relative_time), ]
deviceData$RightEyePupilSize[deviceData$RightEyePupilSize == -1] <- NA
deviceData$LeftEyePupilSize[deviceData$LeftEyePupilSize == -1] <- NA
#where movie or its mode changed
movie_mode_change = when_movie_mode_changed(deviceData)[["systemTime"]]
print(movie_mode_change)
segment_changed <- deviceData %>%
mutate(segment_changed = (SegmentIndex != lag(SegmentIndex))) %>%
filter(segment_changed == TRUE)
segment_changed$systemTime
when_segment_changed(deviceData)
when_segment_changed(deviceData)
movie_mode_change = when_movie_mode_changed(deviceData)[["systemTime"]]
print(movie_mode_change)
segment_changed <- when_segment_changed(deviceData)
segment_changed <- when_segment_changed(deviceData)
segment_changed
ecgData <- read.csv("data/3_ECG.csv", sep = ",", encoding = "utf-8")
ecgData <- clean_and_add_time_to_ecg(ecgData,deviceData$systemTime[1])
event_changed <- when_event_changed(ecgData)
video_start_ecg <- (video_mode_change %>% filter(video_start))$systemTime
video_end_ecg <- (video_mode_change %>% filter(video_end))$systemTime
segment_changed
# Create data frames for each event
df_segment <- data.frame(time = segment_change, event = 'Segment Change')
df_video_start <- data.frame(time = video_start_ecg, event = 'Video Start ECG')
df_video_end <- data.frame(time = video_end_ecg, event = 'Video End ECG')
df_movie_mode <- data.frame(time = movie_mode_change, event = 'Movie Mode  Change')
# Combine the data frames into one
changes_combined <- rbind(df_segment, df_video_start, df_video_end, df_movie_mode)
video_start_ecg <- (video_mode_change %>% filter(video_start))$systemTime
video_end_ecg <- (video_mode_change %>% filter(video_end))$systemTime
segment_changed
# Create data frames for each event
df_segment <- data.frame(time = segment_change, event = 'Segment Change')
df_video_start <- data.frame(time = video_start_ecg, event = 'Video Start ECG')
df_video_end <- data.frame(time = video_end_ecg, event = 'Video End ECG')
df_movie_mode <- data.frame(time = movie_mode_change, event = 'Movie Mode  Change')
# Combine the data frames into one
changes_combined <- rbind(df_segment, df_video_start, df_video_end, df_movie_mode)
when_movie_mode_changed(deviceData)
View(deviceData)
when_movie_mode_changed_ext <- function(df) {
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Combine the two logical vectors to find any changes
changes <- name_changes | mode_changes
# Get the indices where changes occur
change_indices <- which(changes)
# Get start times and other info
start_times <- df$Time[change_indices]
start_video_names <- df$VideoName[change_indices]
start_video_modes <- df$VideoMode[change_indices]
# Get end times: The end time for each period is the start time of the next period, or NA for the last period
end_times <- c(df$Time[change_indices[-1]], NA)
# Create a new data frame with start and end information
changes_rows <- data.frame(
StartTime = start_times,
EndTime = end_times,
VideoName = start_video_names,
VideoMode = start_video_modes
)
return(changes_rows)
}
when_movie_mode_changed_ext(deviceData)
when_movie_mode_changed(deviceData)
when_movie_mode_changed(deviceData)$systemTime
when_movie_mode_changed_ext <- function(df) {
# Ensure df has the necessary columns
if (!all(c("Time", "VideoName", "VideoMode") %in% colnames(df))) {
stop("Data frame must contain 'Time', 'VideoName', and 'VideoMode' columns.")
}
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Get the indices where changes occur
name_change_indices <- which(name_changes)
mode_change_indices <- which(mode_changes)
# Create data for VideoName changes
name_changes_rows <- data.frame(
systemTime = df$Time[name_change_indices],
type = "moviename",
name = df$VideoName[name_change_indices],
stringsAsFactors = FALSE
)
# Create data for VideoMode changes
mode_changes_rows <- data.frame(
systemTime = df$Time[mode_change_indices],
type = "mode",
name = df$VideoMode[mode_change_indices],
stringsAsFactors = FALSE
)
# Combine the two data frames
combined_changes <- rbind(name_changes_rows, mode_changes_rows)
# Sort by systemTime to maintain chronological order
combined_changes <- combined_changes[order(combined_changes$systemTime), ]
return(combined_changes)
}
when_movie_mode_changed_ext(deviceData)
when_movie_mode_changed_ext <- function(df) {
# Ensure df has the necessary columns
if (!all(c("systemTime", "VideoName", "VideoMode") %in% colnames(df))) {
stop("Data frame must contain 'systemTime', 'VideoName', and 'VideoMode' columns.")
}
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Get the indices where changes occur
name_change_indices <- which(name_changes)
mode_change_indices <- which(mode_changes)
# Create data for VideoName changes
name_changes_rows <- data.frame(
systemTime = df$systemTime[name_change_indices],
type = "moviename",
name = df$VideoName[name_change_indices],
stringsAsFactors = FALSE
)
# Create data for VideoMode changes
mode_changes_rows <- data.frame(
systemTime = df$Time[mode_change_indices],
type = "mode",
name = df$VideoMode[mode_change_indices],
stringsAsFactors = FALSE
)
# Combine the two data frames
combined_changes <- rbind(name_changes_rows, mode_changes_rows)
# Sort by systemTime to maintain chronological order
combined_changes <- combined_changes[order(combined_changes$systemTime), ]
return(combined_changes)
}
when_movie_mode_changed_ext(deviceData)
when_movie_mode_changed_ext <- function(df) {
# Ensure df has the necessary columns
if (!all(c("systemTime", "VideoName", "VideoMode") %in% colnames(df))) {
stop("Data frame must contain 'systemTime', 'VideoName', and 'VideoMode' columns.")
}
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Get the indices where changes occur
name_change_indices <- which(name_changes)
mode_change_indices <- which(mode_changes)
print(name_change_indices)
print(mode_change_indices)
# Create data for VideoName changes
name_changes_rows <- data.frame(
systemTime = df$systemTime[name_change_indices],
type = "moviename",
name = df$VideoName[name_change_indices],
stringsAsFactors = FALSE
)
# Create data for VideoMode changes
mode_changes_rows <- data.frame(
systemTime = df$Time[mode_change_indices],
type = "mode",
name = df$VideoMode[mode_change_indices],
stringsAsFactors = FALSE
)
# Combine the two data frames
combined_changes <- rbind(name_changes_rows, mode_changes_rows)
# Sort by systemTime to maintain chronological order
combined_changes <- combined_changes[order(combined_changes$systemTime), ]
return(combined_changes)
}
when_movie_mode_changed_ext(deviceData)
View(deviceData)
when_movie_mode_changed_ext <- function(df) {
# Ensure df has the necessary columns
if (!all(c("systemTime", "VideoName", "VideoMode") %in% colnames(df))) {
stop("Data frame must contain 'systemTime', 'VideoName', and 'VideoMode' columns.")
}
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Get the indices where changes occur
name_change_indices <- which(name_changes)
mode_change_indices <- which(mode_changes)
print(name_change_indices)
print(mode_change_indices)
# Create data for VideoName changes
name_changes_rows <- data.frame(
systemTime = df$systemTime[name_change_indices],
type = "moviename",
name = df$VideoName[name_change_indices],
stringsAsFactors = FALSE
)
return(name_changes_rows)
}
when_movie_mode_changed_ext(deviceData)
when_movie_mode_changed_ext <- function(df) {
# Ensure df has the necessary columns
if (!all(c("systemTime", "VideoName", "VideoMode") %in% colnames(df))) {
stop("Data frame must contain 'systemTime', 'VideoName', and 'VideoMode' columns.")
}
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Get the indices where changes occur
name_change_indices <- which(name_changes)
mode_change_indices <- which(mode_changes)
print(name_change_indices)
print(mode_change_indices)
# Create data for VideoName changes
name_changes_rows <- data.frame(
systemTime = df$systemTime[name_change_indices],
type = "moviename",
name = df$VideoName[name_change_indices],
mode = df$VideoMode[name_change_indices],
stringsAsFactors = FALSE
)
return(name_changes_rows)
}
when_movie_mode_changed_ext(deviceData)
deviceData <- deviceDataList[[3]]
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
deviceData$relative_time <- (deviceData$systemTime - min(deviceData$systemTime))
deviceData <- deviceData[!duplicated(deviceData$relative_time), ]
deviceData$RightEyePupilSize[deviceData$RightEyePupilSize == -1] <- NA
deviceData$LeftEyePupilSize[deviceData$LeftEyePupilSize == -1] <- NA
movie_mode_change = when_movie_mode_changed(deviceData)[["systemTime"]]
print(movie_mode_change)
when_movie_mode_changed_ext(deviceData)
when_movie_mode_changed_ext(deviceData)
when_movie_mode_changed_ext <- function(df) {
# Ensure df has the necessary columns
if (!all(c("systemTime", "VideoName", "VideoMode") %in% colnames(df))) {
stop("Data frame must contain 'systemTime', 'VideoName', and 'VideoMode' columns.")
}
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Get the indices where changes occur
name_change_indices <- which(name_changes)
mode_change_indices <- which(mode_changes)
print(name_change_indices)
print(mode_change_indices)
# Create data for VideoName changes
name_changes_rows <- data.frame(
systemTime = df$systemTime[name_change_indices],
name = df$VideoName[name_change_indices],
mode = df$VideoMode[name_change_indices],
stringsAsFactors = FALSE
)
return(name_changes_rows)
}
when_movie_mode_changed_ext(deviceData)
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(1, 2, 3)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0("data/", id, "_DeviceData.csv")
questionFileName <- paste0("data/", id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
questionData["Id"] <- id
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
questionData_combined <- bind_rows(questionDataList)
deviceData <- deviceDataList[[1]]
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
)
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the relative_time column to relative time
deviceData$relative_time <- (deviceData$relative_time - min(deviceData$relative_time))
View(deviceData)
deviceData <- deviceDataList[[1]]
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
deviceData$relative_time <- (deviceData$systemTime - min(deviceData$systemTime))
deviceData <- deviceData[!duplicated(deviceData$relative_time), ]
deviceData$RightEyePupilSize[deviceData$RightEyePupilSize == -1] <- NA
deviceData$LeftEyePupilSize[deviceData$LeftEyePupilSize == -1] <- NA
# Apply approx function to the pupil size columns
deviceData <- deviceData %>%
arrange(relative_time) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
# Function that takes deviceData df and returns a frame with rows, when the
# VideoMode/Video changed
where_film_mode_changed <-function(df) {
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Combine the two logical vectors
changes <- name_changes | mode_changes
# Get the indices where changes occur
change_indices <- which(changes)
changes_rows <- df[change_indices,]
return(changes_rows)
}
#where movie or its mode changed
movie_changed = where_film_mode_changed(deviceData)
# Create a line plot with smoothing for both eyes
ggplot(deviceData, aes(x = relative_time)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# Calculate the average pupil size
deviceData$average_pupil_size <- rowMeans(deviceData[, c("smoothed_right_pupil_size", "smoothed_left_pupil_size")], na.rm = TRUE)
# Create a line plot for the average pupil size
# removed vlines as no spawnData was identified
ggplot(deviceData, aes(x = relative_time, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size")+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# +geom_text(data = changes_rows, aes(x = relative_time, y = 0.0, label = changes_rows$VideoName),
# angle = 90, vjust = -0.5, color = "darkgreen", size = 3)
clean_and_add_time_to_ecg <- function(ecgData, baseTime)  {
# Find the indices of non-zero EVENT values
non_zero_indices <- which(ecgData$EVENT != 0)
# Get the first and last index of non-zero values
first_non_zero <- min(non_zero_indices)
last_non_zero <- max(non_zero_indices)
# Subset the dataframe to keep only the rows between the first and last non-zero indices
ecgData_cleaned <- ecgData[first_non_zero:last_non_zero, ]
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
time_increment <- 1/sampling_rate
rownames(ecgData_cleaned) <- seq_len(nrow(ecgData_cleaned))
ecgData_cleaned$systemTime <- baseTime + seq(0, by = time_increment, length.out = nrow(ecgData_cleaned))
return(ecgData_cleaned)
}
clean_and_add_time_to_ecg <- function(ecgData, baseTime)  {
# Find the indices of non-zero EVENT values
non_zero_indices <- which(ecgData$EVENT != 0)
# Get the first and last index of non-zero values
first_non_zero <- min(non_zero_indices)
last_non_zero <- max(non_zero_indices)
# Subset the dataframe to keep only the rows between the first and last non-zero indices
ecgData_cleaned <- ecgData[first_non_zero:last_non_zero, ]
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
time_increment <- 1/sampling_rate
rownames(ecgData_cleaned) <- seq_len(nrow(ecgData_cleaned))
ecgData_cleaned$systemTime <- baseTime + seq(0, by = time_increment, length.out = nrow(ecgData_cleaned))
return(ecgData_cleaned)
}
ecgData <- clean_and_add_time_to_ecg(ecgData,deviceData$systemTime[1])
View(questionData)
questionData
prepare_dataset <- function(df) {
# Convert the Timestamp column to POSIXct (Date-Time format)
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Create a column for Time in seconds relative to the start
df$Time <- as.numeric(difftime(df$Timestamp, min(df$Timestamp), units = "secs"))
# Identify changes in VideoName and VideoMode
name_changes <- c(TRUE, df$VideoName[-1] != df$VideoName[-nrow(df)])
mode_changes <- c(TRUE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Create a START event when a change is detected
df_start <- df[name_changes | mode_changes, ]
df_start$Type <- "START"
# Create a STOP event when the next change occurs (except for the last row)
df_stop <- df_start[-1, ]
df_stop$Time <- df_start$Time[-nrow(df_start)]
df_stop$Type <- "STOP"
# Combine the start and stop data
df_combined <- rbind(df_start, df_stop)
# Select relevant columns
df_combined <- df_combined[, c("Time", "VideoName", "VideoMode", "Type")]
# Sort by time
df_combined <- df_combined[order(df_combined$Time), ]
return(df_combined)
}
prepare_dataset(questionData)
prepare_dataset <- function(df) {
# Convert the Timestamp column to POSIXct (Date-Time format)
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Create a column for Time in seconds relative to the start
df$Time <- as.numeric(difftime(df$Timestamp, min(df$Timestamp), units = "secs"))
# Identify changes in VideoName and VideoMode
name_changes <- c(TRUE, df$VideoName[-1] != df$VideoName[-nrow(df)])
mode_changes <- c(TRUE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Create a START event when a change is detected
df_start <- df[name_changes | mode_changes, ]
# Select relevant columns
df_start <- df_start[, c("Time", "VideoName", "VideoMode", "Type")]
# Sort by time
df_combined <- df_start[order(df_combined$Time), ]
return(df_combined)
}
prepare_dataset(questionData)
prepare_dataset <- function(df) {
# Convert the Timestamp column to POSIXct (Date-Time format)
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Create a column for Time in seconds relative to the start
df$Time <- as.numeric(difftime(df$Timestamp, min(df$Timestamp), units = "secs"))
# Identify changes in VideoName and VideoMode
name_changes <- c(TRUE, df$VideoName[-1] != df$VideoName[-nrow(df)])
mode_changes <- c(TRUE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Create a START event when a change is detected
df_start <- df[name_changes | mode_changes, ]
df_start$Type <- "START"
# Select relevant columns
df_start <- df_start[, c("Time", "VideoName", "VideoMode", "Type")]
# Sort by time
df_combined <- df_start[order(df_start$Time), ]
return(df_combined)
}
prepare_dataset(questionData)
prepare_dataset <- function(df) {
# Convert the Timestamp column to POSIXct (Date-Time format)
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Create a column for Time in seconds relative to the start
df$Time <- as.numeric(difftime(df$Timestamp, min(df$Timestamp), units = "secs"))
# Identify changes in VideoName and VideoMode
name_changes <- c(TRUE, df$VideoName[-1] != df$VideoName[-nrow(df)])
mode_changes <- c(TRUE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Create a START event when a change is detected
df_start <- df[name_changes | mode_changes, ]
# Select relevant columns
df_start <- df_start[, c("Time", "VideoName", "VideoMode")]
# Sort by time
df_combined <- df_start[order(df_start$Time), ]
return(df_combined)
}
prepare_dataset(questionData)
