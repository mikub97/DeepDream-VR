# Interpolate only non-NA segments
x_approx <- zoo::na.approx(x, na.rm = FALSE)
# Replace leading and trailing NAs with original values
x_approx[is.na(x_approx)] <- x[is.na(x_approx)]
return(x_approx)
}
# Generate mock data   if needed
#questionData97 <- generate_mock_data(97)
#questionData98 <- generate_mock_data(98)
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(1, 2)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0("data/", id, "_DeviceData.csv")
questionFileName <- paste0("data/", id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
combined_data <- bind_rows(questionDataList)
summary(combined_data$AnswerDuration)
# Summarize the data
answers_summary <- combined_data %>%
group_by(Id, VideoMode, VideoName, QuestionIndex, QuestionAnswer) %>%
summarize(Count = n(), .groups = 'drop')
# Display the summary table
kable(answers_summary[1:10,], caption = "Summary Table of Question Answers by Participant, VideoMode, and VideoName")
# Summarize the average QuestionAnswer for each VideoMode and VideoName
summary_data <- answers_summary %>%
group_by(VideoName, QuestionIndex) %>%
summarise(
AvgAnswer = mean(QuestionAnswer),
AnswerCount = sum(Count)
)
# Display the summarized data
kable(summary_data, caption = "Average QuestionAnswer for each  VideoName")
# Plot the distribution of Question Answers by VideoMode
ggplot(combined_data, aes(x=as.factor(QuestionIndex), fill=as.factor(QuestionAnswer))) +
geom_bar(position="dodge") +
facet_wrap(~ VideoMode) +
labs(title="Distribution of Question Answers by VideoMode",
x="Question Index",
y="Count",
fill="Question Answer") +
theme_minimal()
# Plot the distribution of Question Answers by VideoName
ggplot(combined_data, aes(x=as.factor(QuestionIndex), fill=as.factor(QuestionAnswer))) +
geom_bar(position="dodge") +
facet_wrap(~ VideoName) +
labs(title="Distribution of Question Answers by VideoName",
x="Question Index",
y="Count",
fill="Question Answer") +
theme_minimal()
# ANOVA to compare QuestionAnswers across different VideoModes and VideoNames
anova_result <- aov(QuestionAnswer ~ VideoMode * VideoName, data = answers_summary)
summary(anova_result)
deviceData <- read.csv("data/99_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
#explore the differences in columns, maybe I did skipped some?
colnames(deviceData)
df <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
df$relative_time <- (df$systemTime - min(df$systemTime))
df <- df[!duplicated(df$relative_time), ]
df$RightEyePupilSize[df$RightEyePupilSize == -1] <- NA
df$LeftEyePupilSize[df$LeftEyePupilSize == -1] <- NA
# Apply the function to the pupil size columns
df <- df %>%
arrange(relative_time) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
#where movie or its mode changed
movie_changed = where_film_mode_changed(df)
# Create a line plot with smoothing for both eyes
ggplot(df, aes(x = relative_time)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# Calculate the average pupil size
df$average_pupil_size <- rowMeans(df[, c("smoothed_right_pupil_size", "smoothed_left_pupil_size")], na.rm = TRUE)
# Create a line plot for the average pupil size
ggplot(df, aes(x = relative_time, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size") +
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
deviceData <- read.csv("data/1_DeviceData.csv", sep = ";", encoding = "utf-8")
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
df <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
df$relative_time <- (df$systemTime - min(df$systemTime))
df <- df[!duplicated(df$relative_time), ]
df$RightEyePupilSize[df$RightEyePupilSize == -1] <- NA
df$LeftEyePupilSize[df$LeftEyePupilSize == -1] <- NA
# Apply the function to the pupil size columns
df <- df %>%
arrange(relative_time) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
#where movie or its mode changed
movie_changed = where_film_mode_changed(df)
# Create a line plot with smoothing for both eyes
ggplot(df, aes(x = relative_time)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# Calculate the average pupil size
df$average_pupil_size <- rowMeans(df[, c("smoothed_right_pupil_size", "smoothed_left_pupil_size")], na.rm = TRUE)
# Create a line plot for the average pupil size
# removed vlines as no spawnData was identified
ggplot(df, aes(x = relative_time, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size")+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# +geom_text(data = changes_rows, aes(x = relative_time, y = 0.0, label = changes_rows$VideoName),
# angle = 90, vjust = -0.5, color = "darkgreen", size = 3)
deviceData <- read.csv("data/2_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
#explore the differences in columns, maybe I did skipped some?
colnames(deviceData)
df <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
df$relative_time <- (df$systemTime - min(df$systemTime))
df <- df[!duplicated(df$relative_time), ]
#where movie or its mode changed
movie_changed = where_film_mode_changed(df)
spawnData <- df[df$objectId != "",] # no applicable in this case I guess
df$RightEyePupilSize[df$RightEyePupilSize == -1] <- NA
df$LeftEyePupilSize[df$LeftEyePupilSize == -1] <- NA
# Apply the function to the pupil size columns
df <- df %>%
arrange(relative_time) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
# Create a line plot with smoothing for both eyes
ggplot(df, aes(x = relative_time)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# Calculate the average pupil size
df$average_pupil_size <- rowMeans(df[, c("smoothed_right_pupil_size", "smoothed_left_pupil_size")], na.rm = TRUE)
# Create a line plot for the average pupil size
ggplot(df, aes(x = relative_time, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size")+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
ecgData
colnames(ecgData)
ecgData$EVENT
unique(ecgData$EVENT)
ecgData
result <- subset(ecgData, EVENT != 0)
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
result <- subset(ecgData, EVENT != 0)
results
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
result <- subset(ecgData, EVENT != 0)
result
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
change_rows <- which(c(FALSE, diff(dataframe$EVENT) != 0))
change_rows <- which(c(FALSE, diff(ecgData$EVENT) != 0))
change_rows
View(ecgData)
result <- ecgData[change_rows, ]
results
result
deviceData
data
data
print(data)
deviceData <- read.csv("data/1_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
df <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
df$relative_time <- (df$systemTime - min(df$systemTime))
df <- df[!duplicated(df$relative_time), ]
df$RightEyePupilSize[df$RightEyePupilSize == -1] <- NA
df$LeftEyePupilSize[df$LeftEyePupilSize == -1] <- NA
# Apply the function to the pupil size columns
df <- df %>%
arrange(relative_time) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
#where movie or its mode changed
movie_changed = where_film_mode_changed(df)
# Create a line plot with smoothing for both eyes
ggplot(df, aes(x = relative_time)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# Calculate the average pupil size
df$average_pupil_size <- rowMeans(df[, c("smoothed_right_pupil_size", "smoothed_left_pupil_size")], na.rm = TRUE)
# Create a line plot for the average pupil size
# removed vlines as no spawnData was identified
ggplot(df, aes(x = relative_time, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size")+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# +geom_text(data = changes_rows, aes(x = relative_time, y = 0.0, label = changes_rows$VideoName),
# angle = 90, vjust = -0.5, color = "darkgreen", size = 3)
View(df)
colnames(df)
baseTime = df$systemTime[0]
baseTime
baseTime
baseTime = df$systemTime[1]
results
result
offsets_in_ms <- result$row_number - 1 # subtract 1 to get 0-based index
offsets_in_ms
# Convert the row indices in the 'result' dataframe to milliseconds
offsets_in_ms <- result$id - 1 # subtract 1 to get 0-based index
# Convert the row indices in the 'result' dataframe to milliseconds
offsets_in_ms
results$index
as.numeric(rownames(result))
View(result)
ids_shifted = as.numeric(rownames(df))-as.numeric(rownames(df))[1]
ids_shifted
as.numeric(rownames(df))[1]
ids_shifted = as.numeric(rownames(df))
ids_shifted
ids_shifted = as.numeric(rownames(result))
ids_shifted
ids_shifted = ids_shifted - ids_shifted[1]
ids_shifted
ids_shifted
systemTime_result = ids_shifted/sampling_rate
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
systemTime_result = ids_shifted/sampling_rate
systemTime_result
systemTime_result = (ids_shifted/sampling_rate)+baseTime
systemTime_result = (ids_shifted/sampling_rate)+baseTime
systemTime_result
change_rows <- which(c(FALSE, diff(ecgData$EVENT) != 0))
result <- ecgData[change_rows, ]
baseTime = df$systemTime[1]
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
ids_shifted = as.numeric(rownames(result))
ids_shifted = ids_shifted - ids_shifted[1]
systemTime_result = (ids_shifted/sampling_rate)+baseTime
systemTime_result
baseTime
(ecgData$EVENT) != 0))
change_rows <- which(c(FALSE, diff(ecgData$EVENT) != 0))
result <- ecgData[change_rows, ]
baseTime = df$systemTime[1]
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
ids_shifted = as.numeric(rownames(result))
ids_shifted = ids_shifted - ids_shifted[1]
systemTime_result = (ids_shifted*sampling_rate)+baseTime
systemTime_result
result$systemTime <- systemTime_result
view(result)
View(result)
View(df)
baseTime = df$systemTime[1]
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
ids_shifted = as.numeric(rownames(result))
ids_shifted = ids_shifted - ids_shifted[1]
systemTime_result = (ids_shifted/sampling_rate)+baseTime
result$systemTime <- systemTime_result
View(result)
View(df)
result <- ecgData[change_rows, ]
ecgData
plot(ecgData$EVENT,
type = "l",  # 'l' for line plot
main = "Line Plot of EVENT",
xlab = "Index",
ylab = "EVENT",
col = "blue")  # You can change the color if desired
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
change_rows <- which(c(FALSE, diff(ecgData$EVENT) != 0))
result <- ecgData[change_rows, ]
baseTime = df$systemTime[1]
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
ids_shifted = as.numeric(rownames(result))
ids_shifted = ids_shifted - ids_shifted[1]
systemTime_result = (ids_shifted/sampling_rate)+baseTime
result$systemTime <- systemTime_result
plot(ecgData$EVENT,
type = "l",  # 'l' for line plot
main = "Line Plot of EVENT",
xlab = "Index",
ylab = "EVENT",
col = "blue")  # You can change the color if desired
View(ecgData)
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
change_rows <- which(c(FALSE, diff(ecgData$EVENT) == 4))
result <- ecgData[change_rows, ]
baseTime = df$systemTime[1]
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
ids_shifted = as.numeric(rownames(result))
ids_shifted = ids_shifted - ids_shifted[1]
systemTime_result = (ids_shifted/sampling_rate)+baseTime
result$systemTime <- systemTime_result
View(result)
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
change_rows <- which(c(FALSE, diff(ecgData$EVENT) == 4))+1
result <- ecgData[change_rows, ]
baseTime = df$systemTime[1]
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
ids_shifted = as.numeric(rownames(result))
ids_shifted = ids_shifted - ids_shifted[1]
systemTime_result = (ids_shifted/sampling_rate)+baseTime
result$systemTime <- systemTime_result
View(result)
#change_rows <- which(c(FALSE, diff(ecgData$EVENT) == 4))
change_rows <- which(ecgData$EVENT == 4 & dplyr::lead(ecgData$EVENT) == 8)
result <- ecgData[change_rows, ]
View(result)
df
changed_rows <- df %>%
mutate(
VideoNameChange = VideoName != lag(VideoName, default = first(VideoName)),
VideoModeChange = VideoMode != lag(VideoMode, default = first(VideoMode))
) %>%
filter(VideoNameChange | VideoModeChange)
# Display the rows where changes occurred
print(changed_rows)
View(changed_rows)
unique(df$VideoMode)
unique(df$VideoName)
View(changed_rows)
View(ecgData)
deviceData <- read.csv("data/1_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
df <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
df$relative_time <- (df$systemTime - min(df$systemTime))
df <- df[!duplicated(df$relative_time), ]
colnames(df)
unique(df$VideoName)
unique(df$VideoMode)
View(deviceData)
plot(df$QuestionIndex)
plot(df$QuestionIndex,df$systemTime)
plot(df$systemTime,df$QuestionIndex)
ecgData
plot(ecgData$EVENT,
type = "l",  # 'l' for line plot
main = "Line Plot of EVENT",
xlab = "Index",
ylab = "EVENT",
col = "blue")  # You can change the color if desired
print(ecgData$EVENT)
# Find the indices of non-zero EVENT values
non_zero_indices <- which(ecgData$EVENT != 0)
# Get the first and last index of non-zero values
first_non_zero <- min(non_zero_indices)
last_non_zero <- max(non_zero_indices)
# Subset the dataframe to keep only the rows between the first and last non-zero indices
result <- ecgData[first_non_zero:last_non_zero, ]
# Display the resulting dataframe
print(result)
View(result)
ecgData_cleaned <- ecgData[first_non_zero:last_non_zero, ]
View(ecgData_cleaned)
baseTime = df$systemTime
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
ids_shifted = as.numeric(rownames(ecgData_cleaned))
ids_shifted = ids_shifted - ids_shifted[1]
systemTime_result = (ids_shifted/sampling_rate)+baseTime
rownames(ecgData_cleaned)
(nrow(ecgData_cleaned))
rownames(ecgData_cleaned) <- seq_len(nrow(ecgData_cleaned))
rownames(ecgData_cleaned)
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
time_increment <- 1/sampling_rate
rownames(ecgData_cleaned) <- seq_len(nrow(ecgData_cleaned))
result$systemTime <- baseTime + seq(0, by = time_increment, length.out = nrow(ecgData_cleaned))
rownames(ecgData_cleaned)
View(ecgData_cleaned)
ecgData_cleaned$systemTime <- baseTime + seq(0, by = time_increment, length.out = nrow(ecgData_cleaned))
change_rows <- which(ecgData$EVENT == 4 & dplyr::lead(ecgData$EVENT) == 8)
changed_rows
View(changed_rows)
change_rows
plot(ecgData_cleaned$systemTime,ecgData_cleaned$EVENT)
change_rows <- which(ecgData$EVENT == 8 & dplyr::lead(ecgData$EVENT) == 4)
change_rows
ecgData_cleaned
rle(ecgData_cleaned$EVENT)
unique_consecutive <- rle(ecgData_cleaned$EVENT).values
unique_consecutive <- rle(ecgData_cleaned$EVENT)$values
rle(ecgData_cleaned$EVENT)$values
ecgData_cleaned$EVENT
rows_changed_to_4 <- which(df$EVENT == 4 & lag(df$EVENT) != 4)
rows_changed_to_4 <- which(ecgData_cleaned$EVENT == 4 & lag(ecgData_cleaned$EVENT) != 4)
rows_changed_to_8 <- which(ecgData_cleaned$EVENT == 8 & lag(ecgData_cleaned$EVENT) != 8)
rows_changed_to_4
ecgData_cleaned[rows_changed_to_4]
ecgData_cleaned[rows_changed_to_4, ]
rows_changed_to_4_or_8 <- which((ecgData_cleaned$EVENT == 4 & lag(ecgData_cleaned$EVENT) != 4) | (ecgData_cleaned$EVENT == 8 & lag(ecgData_cleaned$EVENT) != 8))
ecgData_cleaned[rows_changed_to_4_or_8 ]
ecgData_cleaned[rows_changed_to_4_or_8, ]
video_changed_or_stoped <- ecgData_cleaned[rows_changed_to_4_or_8, ]
video_changed_or_stoped
video_changed_or_stoped_vr <- df[changed_rows,]
changed_rows <- df %>%
mutate(
VideoNameChange = VideoName != lag(VideoName, default = first(VideoName)),
VideoModeChange = VideoMode != lag(VideoMode, default = first(VideoMode))
) %>%
filter(VideoNameChange | VideoModeChange)
video_changed_or_stoped_vr <- df[changed_rows,]
video_changed_or_stoped_vr <- df[[changed_rows,]]
changed_rows
changed_rows
rle(ecgData_cleaned$EVENT)$values
plot(ecgData_cleaned$systemTime, ecgData_cleaned$EVENT)
plot(ecgData_cleaned$systemTime, ecgData_cleaned$EVENT)
(ecgData_cleaned$systemTime, ecgData_cleaned$EVENT)
plot(ecgData_cleaned$systemTime, ecgData_cleaned$EVENT)
plot(df$systemTime,df$SegmentIndex)
plot(df$systemTime,df$SegmentIndex)
View(changed_rows)
View(changed_rows)
unique(ecgData$EVENT)
plot(df$systemTime,df$QuestionIndex)
plor(ecgData_cleaned$EVENT)
plot(ecgData_cleaned$EVENT)
