questionData98 <- generate_mock_data(98)
# Display the first few rows of the dataset
print(questionData97)
# Save the dataset to a CSV file
write.csv(questionData97, "pilot/97_QuestionsData.csv", row.names = FALSE, sep = ";")
write.csv(questionData98, "pilot/98_QuestionsData.csv", row.names = FALSE, sep = ";")
questionData99 <- read.csv("pilot/99_QuestionsData.csv", sep = ";", encoding = "utf-8")
questionData98 <- read.csv("pilot/98_QuestionsData.csv", sep = ";", encoding = "utf-8")
questionData97<- read.csv("pilot/97_QuestionsData.csv", sep = ";", encoding = "utf-8")
combined_data <- bind_rows(questionData99,questionData98,questionData97)
summary(combined_data)
# Summarize the data
summary_table <- combined_data %>%
group_by(Id, VideoMode, VideoName, QuestionIndex, QuestionAnswer) %>%
summarize(Count = n(), .groups = 'drop')
# Display the summary table
kable(summary_table, caption = "Summary Table of Question Answers by Participant, VideoMode, and VideoName")
# Plot the distribution of Question Answers by VideoMode
ggplot(combined_data, aes(x=as.factor(QuestionIndex), fill=as.factor(QuestionAnswer))) +
geom_bar(position="dodge") +
facet_wrap(~ VideoMode) +
labs(title="Distribution of Question Answers by VideoMode",
x="Question Index",
y="Count",
fill="Question Answer") +
theme_minimal()
# Plot the distribution of Question Answers by VideoName
ggplot(combined_data, aes(x=as.factor(QuestionIndex), fill=as.factor(QuestionAnswer))) +
geom_bar(position="dodge") +
facet_wrap(~ VideoName) +
labs(title="Distribution of Question Answers by VideoName",
x="Question Index",
y="Count",
fill="Question Answer") +
theme_minimal()
# Plot the distribution of Question Answers by Participant
ggplot(combined_data, aes(x=as.factor(QuestionIndex), fill=as.factor(QuestionAnswer))) +
geom_bar(position="dodge") +
facet_wrap(~ Id) +
labs(title="Distribution of Question Answers by Participant",
x="Question Index",
y="Count",
fill="Question Answer") +
theme_minimal()
View(questionData98)
View(questionData99)
View(questionData98)
View(questionData97)
View(questionData)
View(questionData)
questionData97 <- generate_mock_data(97)
questionData98 <- generate_mock_data(98)
View(questionData97)
View(questionData98)
View(questionData)
View(questionData97)
View(questionData98)
write.csv(questionData97, "pilot/97_QuestionsData.csv", row.names = TRUE)
write.csv(questionData98, "pilot/98_QuestionsData.csv", row.names = TRUE)
View(questionData97)
View(questionData)
View(questionData97)
View(questionData99)
summary(combined_data$AnswerDuration)
table <- table(subset_data$QuestionAnswer, subset_data$VideoMode)
subset_data <- combined_data %>% filter(QuestionIndex == q)
<- combined_data %>% filter(QuestionIndex == 1)
subset_data <- combined_data %>% filter(QuestionIndex == 1)
subset_data <- combined_data %>% filter(QuestionIndex == 1)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
ubset_data <- combined_data %>% filter(QuestionIndex == 1)
table <- table(subset_data$
table(subset_data$QuestionAnswer, subset_data$VideoName)
table <-
print(table(subset_data$QuestionAnswer, subset_data$VideoName))
subset_data <- combined_data %>% filter(QuestionIndex == 1)
print(table(subset_data$QuestionAnswer, subset_data$VideoName))
subset_data <- combined_data %>% filter(QuestionIndex == 1)
table <- table(subset_data$QuestionAnswer, subset_data$VideoName)
chi_test <- chisq.test(table)
gc()
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
```
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
set.seed(124)
# Function to generate mock data for a participant
generate_mock_data <- function(participant_id) {
data <- data.frame(
Id = participant_id,
Timestamp = as.character(as.POSIXct("2024-06-19 16:33:40") + seq(0, by = 30, length.out = 48)),
Sex = "Male",
Age = 19,
SegmentIndex = rep(1:12, each = 4),
VideoName = rep(c("looped_final", "Train", "Westminster_8k", "NY_octave"), times = 3),
VideoMode = rep(c("NoAnomalies", "OnlyAnomalies", "Coupling"), each = 16),
QuestionIndex = rep(1:4, times = 12),
QuestionAnswer = sample(c(-4, 4), 48, replace = TRUE),
AnswerDuration = round(runif(48, 0.1, 50), 7),
VideoRotation = rep(0, 48),
X = rep("NA", 48)
)
return(data)
}
# Generate mock data
questionData97 <- generate_mock_data(97)
questionData98 <- generate_mock_data(98)
View(questionData98)
View(questionData98)
set.seed(124)
# Function to generate mock data for a participant
generate_mock_data <- function(participant_id) {
data <- data.frame(
Id = participant_id,
Timestamp = as.character(as.POSIXct("2024-06-19 16:33:40") + seq(0, by = 30, length.out = 48)),
Sex = "Male",
Age = 19,
SegmentIndex = rep(1:12, each = 4),
VideoName = rep(c("looped_final", "Train", "Westminster_8k", "NY_octave"), times = 3),
VideoMode = rep(c("NoAnomalies", "OnlyAnomalies", "Coupling"), each = 16),
QuestionIndex = rep(1:4, times = 12),
QuestionAnswer = sample(4, 48, replace = TRUE),
AnswerDuration = round(runif(48, 0.1, 50), 7),
VideoRotation = rep(0, 48),
X = rep("NA", 48)
)
return(data)
}
# Generate mock data
questionData97 <- generate_mock_data(97)
questionData98 <- generate_mock_data(98)
View(questionData98)
set.seed(124)
# Function to generate mock data for a participant
generate_mock_data <- function(participant_id) {
data <- data.frame(
Id = participant_id,
Timestamp = as.character(as.POSIXct("2024-06-19 16:33:40") + seq(0, by = 30, length.out = 48)),
Sex = "Male",
Age = 19,
SegmentIndex = rep(1:12, each = 4),
VideoName = rep(c("looped_final", "Train", "Westminster_8k", "NY_octave"), times = 3),
VideoMode = rep(c("NoAnomalies", "OnlyAnomalies", "Coupling"), each = 16),
QuestionIndex = rep(1:4, times = 12),
QuestionAnswer = sample(-4:4, 48, replace = TRUE),
AnswerDuration = round(runif(48, 0.1, 50), 7),
VideoRotation = rep(0, 48),
X = rep("NA", 48)
)
return(data)
}
# Generate mock data
questionData97 <- generate_mock_data(97)
questionData98 <- generate_mock_data(98)
View(questionData98)
deviceData <- read.csv("pilot/99_DeviceData.csv", sep = ";", encoding = "utf-8")
print(deviceData)
View(deviceData)
data <- read.csv(paste0(path, "/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
path <- "data/"
data <- read.csv(paste0(path, "/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
df <- data %>% select_if(~ !any(is.na(.)))
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
deviceData <- read.csv("pilot/99_DeviceData.csv", sep = ";", encoding = "utf-8")
### Read data for single individual (single condition) to run explorations
path <- "data/"
data <- read.csv(paste0(path, "/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
df <- data %>% select_if(~ !any(is.na(.)))
summary(df)
View(data)
View(deviceData)
deviceData <- read.csv("pilot/99_DeviceData.csv", sep = ";", encoding = "utf-8")
### Read data for single individual (single condition) to run explorations
data <- read.csv(paste0("data/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
df <- data %>% select_if(~ !any(is.na(.)))
summary(df)
columns(df)
cols(df)
columnnames(df)
colnames(df)
colnames(df)
colnames(data)
colnames(df)
colnames(deviceData)
union(colnames(df),colnames(deviceData))
intersect(colnames(df),colnames(deviceData))
exampledata <- read.csv(paste0("data/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
colnames(df)
colnames(deviceData)
intersect(colnames(df),colnames(deviceData))
View(exampledata)
deviceData <- read.csv("pilot/99_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Read data for single individual (single condition) to run explorations
exampledata <- read.csv(paste0("data/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
exampledata <- exampledata %>% select_if(~ !any(is.na(.)))
View(exampledata)
View(deviceData)
deviceData <- read.csv("pilot/99_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
)
### Read data for single individual (single condition) to run explorations
exampledata <- read.csv(paste0("data/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
exampledata <- exampledata %>% select_if(~ !any(is.na(.)))
colnames(df)
colnames(deviceData)
intersect(colnames(df),colnames(deviceData))
summary(df)
deviceData <- read.csv("pilot/99_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
)
### Read data for single individual (single condition) to run explorations
exampledata <- read.csv(paste0("data/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
exampledata <- exampledata %>% select_if(~ !any(is.na(.)))
colnames(exampledata)
colnames(deviceData)
deviceData <- read.csv("pilot/99_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
)
### Read data for single individual (single condition) to run explorations
exampledata <- read.csv(paste0("data/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
exampledata <- exampledata %>% select_if(~ !any(is.na(.)))
colnames(exampledata)
colnames(deviceData)
intersect(colnames(exampledata),colnames(deviceData))
deviceData <- read.csv("pilot/99_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpeness = LeftEyeOpenness,
RightEyeOpeness = RightEyeOpenness
)
deviceData <- read.csv("pilot/99_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness
)
### Read data for single individual (single condition) to run explorations
exampledata <- read.csv(paste0("data/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
exampledata <- exampledata %>% select_if(~ !any(is.na(.)))
colnames(exampledata)
colnames(deviceData)
intersect(colnames(exampledata),colnames(deviceData))
sym_diff <- function(a,b) setdiff(union(a,b), intersect(a,b))
intersect(colnames(exampledata),colnames(deviceData))
sym_diff(colnames(exampledata),colnames(deviceData))
colnames(exampledata)
colnames(deviceData)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness
systemTime = ExperimentSecond
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
deviceData <- read.csv("pilot/99_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
df <- deviceData %>% select_if(~ !any(is.na(.)))
summary(df)
# Convert the systemTime column to relative time
df$relative_time <- (df$systemTime - min(df$systemTime)) / 1000
df <- df[!duplicated(df$relative_time), ]
View(df)
df <- deviceData %>% select_if(~ !any(is.na(.)))
df <- deviceData %>% select_if(~ !any(is.na(.)))
summary(df)
# Convert the systemTime column to relative time
df$relative_time <- (df$systemTime - min(df$systemTime)) / 1000
df <- df[!duplicated(df$relative_time), ]
spawnData <- df[df$objectId != "",]
df$RightEyePupilSize[df$RightEyePupilSize == -1] <- NA
df$LeftEyePupilSize[df$LeftEyePupilSize == -1] <- NA
# Interpolate missing values using linear interpolation for both eyes
df <- df %>%
arrange(relative_time) %>%
mutate(RightEyePupilSize = zoo::na.approx(RightEyePupilSize),
LeftEyePupilSize = zoo::na.approx(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA))
View(df)
View(deviceData)
# Ensure the necessary libraries are loaded
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
### Read data for single individual (single condition) to run explorations
exampledata <- read.csv(paste0("eyetrack_data_example/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"),
skip = 1, sep = ";", encoding = "utf-8")
exampledata <- read.csv(paste0("eyetrack_data_example/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"))
exampledata <- read.csv(paste0("eyetrack_data_example/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"))
setwd("C:/Users/mikub/OneDrive - Akademeia Tutorial College sp. z o.o/11/Research projects/DDREAM VR project/analysis")
deviceData <- read.csv("data/0_DeviceData.csv", sep = ";", encoding = "utf-8")
### Read data for single individual (single condition) to run explorations
exampledata <- read.csv(paste0("eyetrack_data_example/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv")), skip = 1, sep = ";", encoding = "utf-8")
### Read data for single individual (single condition) to run explorations
exampledata <- read.csv(paste0("eyetrack_data_example/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv")), sep = ";", encoding = "utf-8")
### Read data for single individual (single condition) to run explorations
exampledata <- read.csv(paste0("eyetrack_data_example/K01/GazeLog/E2_K01_0 1 2 3 4 5_3_3.csv"), skip = 1, sep = ";", encoding = "utf-8")
# Create a line plot for the average pupil size
# removed vlines as no spawnData was identified
ggplot(df, aes(x = relative_time, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size") )
# Create a line plot for the average pupil size
# removed vlines as no spawnData was identified
ggplot(df, aes(x = relative_time, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size")
setwd("C:/Users/mikub/OneDrive - Akademeia Tutorial College sp. z o.o/11/Research projects/DDREAM VR project/analysis")
# Ensure the necessary libraries are loaded
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
questionData97 <- generate_mock_data(97)
deviceDataList <- list()
questionDataList <- list()
# Number of participants
n <- 3  # Change this to your desired number of participants
# Loop through each participant
for (i in 1:n) {
print(i)
# Generate the file names dynamically
deviceFileName <- paste0("data/", i, "_DeviceData.csv")
questionFileName <- paste0("data/", i, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
# Append the data to the lists
deviceDataList[[i]] <- deviceData
questionDataList[[i]] <- questionData
}
combined_data <- bind_rows(questionDataList)
View(combined_data)
---
title: "Pilot data exploration"
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
n <- 2  # Change this to your desired number of participants
# Loop through each participant
for (i in 0:n) {
print(i)
# Generate the file names dynamically
deviceFileName <- paste0("data/", i, "_DeviceData.csv")
questionFileName <- paste0("data/", i, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
# Append the data to the lists
deviceDataList[[i]] <- deviceData
questionDataList[[i]] <- questionData
}
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
n <- 2  # Change this to your desired number of participants
# Loop through each participant
for (i in 0:n) {
print(i)
# Generate the file names dynamically
deviceFileName <- paste0("data/", i, "_DeviceData.csv")
questionFileName <- paste0("data/", i, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
# Append the data to the lists
deviceDataList[[i+1]] <- deviceData
questionDataList[[i+1]] <- questionData
}
# Optionally, print out the first few rows of each list to verify
for (i in 1:n) {
cat("\nParticipant", i, "Device Data:\n")
print(head(deviceDataList[[i]]))
cat("\nParticipant", i, "Question Data:\n")
print(head(questionDataList[[i]]))
}
combined_data <- bind_rows(questionDataList)
View(combined_data)
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(99, 1, 2)
# Loop through each participant
for (i in participant_ids) {
print(i)
# Generate the file names dynamically
deviceFileName <- paste0("data/", i, "_DeviceData.csv")
questionFileName <- paste0("data/", i, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
} else {
participant_ids <- c(99, 1, 2)
# Loop through each participant
for (i in participant_ids) {
print(i)
# Generate the file names dynamically
deviceFileName <- paste0("data/", i, "_DeviceData.csv")
questionFileName <- paste0("data/", i, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
participant_ids <- c(99, 1, 2)
# Loop through each participant
for (i in participant_ids) {
print(i)
# Generate the file names dynamically
deviceFileName <- paste0("data/", i, "_DeviceData.csv")
questionFileName <- paste0("data/", i, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
View(combined_data)
View(combined_data)
combined_data <- bind_rows(questionDataList)
View(combined_data)
View(deviceDataList)
View(deviceDataList)
View(deviceData)
setwd("C:/Users/mikub/OneDrive - Akademeia Tutorial College sp. z o.o/11/Research projects/DDREAM VR project/analysis")
View(deviceData)
View(questionData97)
# Ensure the necessary libraries are loaded
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
where_film_mode_changed <-function(df) {
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Combine the two logical vectors
changes <- name_changes | mode_changes
# Get the indices where changes occur
change_indices <- which(changes)
changes_rows <- df[change_indices,]
return(changes_rows)
}
