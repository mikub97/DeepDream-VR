combined_device_data <- bind_rows(
lapply(seq_along(split_device_data), function(i) {
segment <- split_device_data[[i]]
segment$segment <- paste0("Segment ", i) # Add segment identifier
segment$systemTime <- segment$systemTime - video_start_ecg[i] # Adjust systemTime
return(segment)
})
)
# Create the plot
ggplot(combined_device_data, aes(x = systemTime)) +
geom_line(aes(y = smoothed_right_pupil_size, color = "Right Eye"), na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size, color = "Left Eye"), na.rm = TRUE) +
labs(
title = "Smoothed Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Smoothed Pupil Size",
color = "Eye",
) +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red")) +
facet_wrap(~segment, scales = "free_x") +
theme_minimal()
# Create the plot for average pupil size
ggplot(combined_device_data, aes(x = systemTime, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(
title = "Average Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Average Pupil Size"
) +
facet_wrap(~segment, scales = "free_x") + # Separate plots for each segment
theme_minimal()
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer, fill = VideoName)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
# Ensure the necessary libraries are loaded
library(here, warn.conflicts = FALSE, quietly=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
library(RColorBrewer)
# Interpolate missing values using linear interpolation for both eyes
library(zoo)
# set working directory
data_dir <- paste0(here())
setwd(data_dir)
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(44)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0("data/", id, "_DeviceData.csv")
questionFileName <- paste0("data/", id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
questionData["Id"] <- id
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
questionData_combined <- bind_rows(questionDataList)
summary(questionData_combined$AnswerDuration)
# Summarize the data
answers_summary <- questionData_combined %>%
group_by(Id, VideoMode, VideoName, QuestionIndex, QuestionAnswer) %>%
summarize(Count = n(), .groups = 'drop')
# Display the summary table
kable(answers_summary[1:10,], caption = "Summary Table of Question Answers by Participant, VideoMode, and VideoName")
# Summarize the average QuestionAnswer for each VideoMode and VideoName
summary_data <- questionData_combined %>%
group_by(VideoName, VideoMode) %>%
summarize(
Mean_Answer = mean(QuestionAnswer, na.rm = TRUE),
SD_Answer = sd(QuestionAnswer, na.rm = TRUE),
Mean_Duration = mean(AnswerDuration, na.rm = TRUE),
SD_Duration = sd(AnswerDuration, na.rm = TRUE),
.groups = "drop"
)
# Display the summarized data
kable(summary_data, caption = "Average QuestionAnswer for each  VideoName")
# Define custom colors for the categories
custom_colors <- c(
"Hallucination" = "#4A1B75", # RGB(74, 27, 117)
"Coupling" = "#1B7A80",      # RGB(27, 122, 128)
"Normal" = "#464640"         # RGB(70, 70, 64)
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer, fill = VideoName)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode and VideoName",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer, fill = VideoName)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode and VideoName",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer)) +
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode and VideoName",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
# Ensure the necessary libraries are loaded
library(here, warn.conflicts = FALSE, quietly=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
library(RColorBrewer)
# Interpolate missing values using linear interpolation for both eyes
library(zoo)
# set working directory
data_dir <- paste0(here("../data/previous"))
setwd(data_dir)
# Create a helper function to handle NA interpolation with leading and trailing NAs
na_approx_with_padding <- function(x) {
# Interpolate only non-NA segments
x_approx <- zoo::na.approx(x, na.rm = FALSE)
# Replace leading and trailing NAs with original values
x_approx[is.na(x_approx)] <- x[is.na(x_approx)]
return(x_approx)
}
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(44)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0("data/", id, "_DeviceData.csv")
questionFileName <- paste0("data/", id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
questionData["Id"] <- id
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(44)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0(id, "_DeviceData.csv")
questionFileName <- paste0(id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
questionData["Id"] <- id
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
questionData_combined <- bind_rows(questionDataList)
summary(questionData_combined$AnswerDuration)
# Summarize the data
answers_summary <- questionData_combined %>%
group_by(Id, VideoMode, VideoName, QuestionIndex, QuestionAnswer) %>%
summarize(Count = n(), .groups = 'drop')
# Display the summary table
kable(answers_summary[1:10,], caption = "Summary Table of Question Answers by Participant, VideoMode, and VideoName")
# Summarize the average QuestionAnswer for each VideoMode and VideoName
summary_data <- questionData_combined %>%
group_by(VideoName, VideoMode) %>%
summarize(
Mean_Answer = mean(QuestionAnswer, na.rm = TRUE),
SD_Answer = sd(QuestionAnswer, na.rm = TRUE),
Mean_Duration = mean(AnswerDuration, na.rm = TRUE),
SD_Duration = sd(AnswerDuration, na.rm = TRUE),
.groups = "drop"
)
# Display the summarized data
kable(summary_data, caption = "Average QuestionAnswer for each  VideoName")
# Define custom colors for the categories
custom_colors <- c(
"Hallucination" = "#4A1B75", # RGB(74, 27, 117)
"Coupling" = "#1B7A80",      # RGB(27, 122, 128)
"Normal" = "#464640"         # RGB(70, 70, 64)
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
questionData_combined <- bind_rows(questionDataList)
summary(questionData_combined$AnswerDuration)
# Summarize the data
answers_summary <- questionData_combined %>%
group_by(Id, VideoMode, VideoName, QuestionIndex, QuestionAnswer) %>%
summarize(Count = n(), .groups = 'drop')
# Display the summary table
kable(answers_summary[1:10,], caption = "Summary Table of Question Answers by Participant, VideoMode, and VideoName")
# Summarize the average QuestionAnswer for each VideoMode and VideoName
summary_data <- questionData_combined %>%
group_by(VideoName, VideoMode) %>%
summarize(
Mean_Answer = mean(QuestionAnswer, na.rm = TRUE),
SD_Answer = sd(QuestionAnswer, na.rm = TRUE),
Mean_Duration = mean(AnswerDuration, na.rm = TRUE),
SD_Duration = sd(AnswerDuration, na.rm = TRUE),
.groups = "drop"
)
# Display the summarized data
kable(summary_data, caption = "Average QuestionAnswer for each  VideoName")
# Define custom colors for the categories
custom_colors <- c(
"Hallucination" = "#4A1B75", # RGB(74, 27, 117)
"Coupling" = "#1B7A80",      # RGB(27, 122, 128)
"Normal" = "#464640"         # RGB(70, 70, 64)
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
# ANOVA to compare QuestionAnswers across different VideoModes and VideoNames
anova_result <- aov(QuestionAnswer ~ VideoMode * VideoName, data = answers_summary)
summary(anova_result)
write.csv(data, "grudzien/1_experiment.csv", row.names = FALSE)
install.packages("devtools")
devtools::install_github("memobc/BIOPACtools")
# set working directory
data_dir <- paste0(here("../data/grudzien"))
library(knitr)
# Initialize lists to store data
deviceDataList <- list()
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(1)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0(id, "_DeviceData.csv")
questionFileName <- paste0(id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
questionData["Id"] <- id
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
questionData_combined <- bind_rows(questionDataList)
summary(questionData_combined$AnswerDuration)
# Summarize the data
answers_summary <- questionData_combined %>%
group_by(Id, VideoMode, VideoName, QuestionIndex, QuestionAnswer) %>%
summarize(Count = n(), .groups = 'drop')
# Display the summary table
kable(answers_summary[1:10,], caption = "Summary Table of Question Answers by Participant, VideoMode, and VideoName")
# Summarize the average QuestionAnswer for each VideoMode and VideoName
summary_data <- questionData_combined %>%
group_by(VideoName, VideoMode) %>%
summarize(
Mean_Answer = mean(QuestionAnswer, na.rm = TRUE),
SD_Answer = sd(QuestionAnswer, na.rm = TRUE),
Mean_Duration = mean(AnswerDuration, na.rm = TRUE),
SD_Duration = sd(AnswerDuration, na.rm = TRUE),
.groups = "drop"
)
# Display the summarized data
kable(summary_data, caption = "Average QuestionAnswer for each  VideoName")
# Define custom colors for the categories
custom_colors <- c(
"Hallucination" = "#4A1B75", # RGB(74, 27, 117)
"Coupling" = "#1B7A80",      # RGB(27, 122, 128)
"Normal" = "#464640"         # RGB(70, 70, 64)
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
# ANOVA to compare QuestionAnswers across different VideoModes and VideoNames
anova_result <- aov(QuestionAnswer ~ VideoMode * VideoName, data = answers_summary)
summary(anova_result)
deviceData <- deviceDataList[[1]]
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
deviceData <- deviceData[-1, ]
deviceData$RightEyePupilSize[deviceData$RightEyePupilSize == -1] <- NA
deviceData$LeftEyePupilSize[deviceData$LeftEyePupilSize == -1] <- NA
questionDataList <- list()
deviceData
deviceData <- deviceDataList[[1]]
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
deviceData <- deviceData[-1, ]
deviceData$RightEyePupilSize[deviceData$RightEyePupilSize == -1] <- NA
deviceData$LeftEyePupilSize[deviceData$LeftEyePupilSize == -1] <- NA
# df should be ECG data
when_event_changed <- function(df) {
result <- df %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
video_start <- result %>%
filter(video_start==TRUE)
video_end <- result %>%
filter(video_end==TRUE)
video_start <- video_start$systemTime
video_end <- video_end$systemTime
print(video_start)  ## this is corresponds to segment change (when new video starts)
print(video_end)
return(result)
}
when_event_changed(ecgData_cleaned)
# df should be device data
when_segment_changed <- function(df) {
result <- df %>%
mutate(segment_changed = (SegmentIndex != lag(SegmentIndex))) %>%
filter(segment_changed == TRUE)
return(result$systemTime)
}
when_segment_changed(deviceData)
# Function that takes deviceData df and returns a frame with rows, when the VideoMode/Video changed
when_movie_mode_changed <-function(df) {
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Combine the two logical vectors
changes <- name_changes | mode_changes
# Get the indices where changes occur
change_indices <- which(changes)
changes_rows <- df[change_indices,]
return(changes_rows)
}
when_movie_mode_changed(deviceData)$systemTime
when_movie_mode_changed_ext <- function(df) {
# Ensure df has the necessary columns
if (!all(c("systemTime", "VideoName", "VideoMode") %in% colnames(df))) {
stop("Data frame must contain 'systemTime', 'VideoName', and 'VideoMode' columns.")
}
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Get the indices where changes occur
name_change_indices <- which(name_changes)
mode_change_indices <- which(mode_changes)
print(name_change_indices)
print(mode_change_indices)
# Create data for VideoName changes
name_changes_rows <- data.frame(
systemTime = df$systemTime[name_change_indices],
type = "moviename",
name = df$VideoName[name_change_indices],
mode = df$VideoMode[name_change_indices],
stringsAsFactors = FALSE
)
return(name_changes_rows)
}
deviceData
ggplot(changes_combined, aes(x = time, y = event, color = event)) +
geom_point(size = 3) +
geom_vline(xintercept = segment_changed, linetype = "dashed", color = "blue", alpha = 0.5) +
geom_vline(xintercept = video_start_ecg, linetype = "dotted", color = "green", alpha = 0.5) +
geom_vline(xintercept = video_end_ecg, linetype = "solid", color = "red", alpha = 0.5) +
geom_vline(xintercept = movie_mode_change, linetype = "longdash", color = "purple", alpha = 0.5) +
labs(title = "Time Event Plot", x = "Time (seconds)", y = "Event Type") +
theme_minimal() +
scale_color_manual(values = c("Segment Change(deviceData)" = "blue", "Video Start (ECG)" = "green",
"Video End (ECG)" = "red", "Movie/Mode Change(deviceData)" = "purple")) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
View(ecgData)
# Apply approx function to the pupil size columns
deviceData <- deviceData %>%
arrange(systemTime) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
# Create a line plot with smoothing for both eyes
ggplot(deviceData, aes(x = systemTime)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = video_start_ecg, color = "green", size = 0.5, linetype = 4)+
geom_vline(xintercept = video_end_ecg, color = "pink", size = 0.5, linetype = 4)
