x = "System Time",
y = "Smoothed Pupil Size",
color = "Eye"
) +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red")) +
geom_vline(data = data.frame(x = c(video_start_ecg, video_end_ecg), type = c(rep("Start", length(video_start_ecg)), rep("End", length(video_end_ecg)))),
aes(xintercept = x, linetype = type), color = c(rep("green", length(video_start_ecg)), rep("pink", length(video_end_ecg))),
size = 0.5) +
facet_wrap(~segment, scales = "free_x") + # Separate plots for each segment
theme_minimal()
View(combined_device_data)
# Adjust `systemTime` to start from 0 for each segment
combined_device_data <- bind_rows(
lapply(seq_along(split_device_data), function(i) {
segment <- split_device_data[[i]]
segment$segment <- paste0("Segment ", i) # Add segment identifier
segment$systemTime <- segment$systemTime - video_start_ecg[i] # Adjust systemTime
return(segment)
})
)
# Update the vline data to match the adjusted systemTime
vline_data <- data.frame(
xintercept = c(rep(0, length(video_start_ecg)), video_end_ecg - video_start_ecg),
type = c(rep("Start", length(video_start_ecg)), rep("End", length(video_end_ecg))),
segment = rep(paste0("Segment ", seq_along(video_start_ecg)), each = 2) # Match segments
)
# Create the plot
ggplot(combined_device_data, aes(x = systemTime)) +
geom_line(aes(y = smoothed_right_pupil_size, color = "Right Eye"), na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size, color = "Left Eye"), na.rm = TRUE) +
geom_vline(data = vline_data, aes(xintercept = xintercept, linetype = type), color = "black", size = 0.5) +
labs(
title = "Smoothed Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Smoothed Pupil Size",
color = "Eye",
linetype = "Marker"
) +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red")) +
facet_wrap(~segment, scales = "free_x") +
theme_minimal()
# Adjust `systemTime` to start from 0 for each segment
combined_device_data <- bind_rows(
lapply(seq_along(split_device_data), function(i) {
segment <- split_device_data[[i]]
segment$segment <- paste0("Segment ", i) # Add segment identifier
segment$systemTime <- segment$systemTime - video_start_ecg[i] # Adjust systemTime
return(segment)
})
)
# Create the plot
ggplot(combined_device_data, aes(x = systemTime)) +
geom_line(aes(y = smoothed_right_pupil_size, color = "Right Eye"), na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size, color = "Left Eye"), na.rm = TRUE) +
labs(
title = "Smoothed Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Smoothed Pupil Size",
color = "Eye",
) +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red")) +
facet_wrap(~segment, scales = "free_x") +
theme_minimal()
# Create the plot for average pupil size
ggplot(combined_device_data, aes(x = systemTime, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(
title = "Average Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Average Pupil Size"
) +
facet_wrap(~segment, scales = "free_x") + # Separate plots for each segment
theme_minimal()
ecgData
# Adjust `systemTime` to start from 0 for each segment
combined_device_data <- bind_rows(
lapply(seq_along(split_device_data), function(i) {
segment <- split_device_data[[i]]
segment$segment <- paste0("Segment ", i) # Add segment identifier
segment$systemTime <- segment$systemTime - video_start_ecg[i] # Adjust systemTime
return(segment)
})
)
# Create the plot
ggplot(combined_device_data, aes(x = systemTime)) +
geom_line(aes(y = smoothed_right_pupil_size, color = "Right Eye"), na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size, color = "Left Eye"), na.rm = TRUE) +
labs(
title = "Smoothed Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Smoothed Pupil Size",
color = "Eye",
) +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red")) +
facet_wrap(~segment, scales = "free_x") +
theme_minimal()
# Adjust `systemTime` to start from 0 for each segment
combined_device_data <- bind_rows(
lapply(seq_along(split_device_data), function(i) {
segment <- split_device_data[[i]]
segment$segment <- paste0("Segment ", i) # Add segment identifier
segment$systemTime <- segment$systemTime - video_start_ecg[i] # Adjust systemTime
return(segment)
})
)
# Create the plot
ggplot(combined_device_data, aes(x = systemTime)) +
geom_line(aes(y = smoothed_right_pupil_size, color = "Right Eye"), na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size, color = "Left Eye"), na.rm = TRUE) +
labs(
title = "Smoothed Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Smoothed Pupil Size",
color = "Eye",
) +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red")) +
facet_wrap(~segment, scales = "free_x") +
theme_minimal()
# Adjust `systemTime` to start from 0 for each segment
combined_device_data <- bind_rows(
lapply(seq_along(split_device_data), function(i) {
segment <- split_device_data[[i]]
segment$segment <- paste0("Segment ", i) # Add segment identifier
segment$systemTime <- segment$systemTime - video_start_ecg[i] # Adjust systemTime
return(segment)
})
)
# Create the plot
ggplot(combined_device_data, aes(x = systemTime)) +
geom_line(aes(y = smoothed_right_pupil_size, color = "Right Eye"), na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size, color = "Left Eye"), na.rm = TRUE) +
labs(
title = "Smoothed Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Smoothed Pupil Size",
color = "Eye",
) +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red")) +
facet_wrap(~segment, scales = "free_x") +
theme_minimal()
# Create the plot for average pupil size
ggplot(combined_device_data, aes(x = systemTime, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(
title = "Average Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Average Pupil Size"
) +
facet_wrap(~segment, scales = "free_x") + # Separate plots for each segment
theme_minimal()
ecgData
plot(ecgData$ECG100C)
plot(ecgData$ECG100C)
plot(head(ecgData$ECG100,100))
plot(head(ecgData$ECG100,1000))
lines(head(ecgData$ECG100,1000))
lines(head(ecgData$ECG100,1000))
# Create the plot for average pupil size
ggplot(combined_device_data, aes(x = systemTime, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(
title = "Average Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Average Pupil Size"
) +
facet_wrap(~segment, scales = "free_x") + # Separate plots for each segment
theme_minimal()
plot(head(ecgData$ECG100,1000), type = "l")
plot(head(ecgData$ECG100,1500), type = "l")
plot(head(ecgData$ECG100,2500), type = "l")
# Apply approx function to the pupil size columns
deviceData <- deviceData %>%
arrange(systemTime) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
# Ensure the necessary libraries are loaded
library(here, warn.conflicts = FALSE, quietly=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
library(RColorBrewer)
# Interpolate missing values using linear interpolation for both eyes
library(zoo)
# set working directory
data_dir <- paste0(here())
setwd(data_dir)
# Create a helper function to handle NA interpolation with leading and trailing NAs
na_approx_with_padding <- function(x) {
# Interpolate only non-NA segments
x_approx <- zoo::na.approx(x, na.rm = FALSE)
# Replace leading and trailing NAs with original values
x_approx[is.na(x_approx)] <- x[is.na(x_approx)]
return(x_approx)
}
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(44)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0("data/", id, "_DeviceData.csv")
questionFileName <- paste0("data/", id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
questionData["Id"] <- id
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
questionData_combined <- bind_rows(questionDataList)
summary(questionData_combined$AnswerDuration)
# Summarize the data
answers_summary <- questionData_combined %>%
group_by(Id, VideoMode, VideoName, QuestionIndex, QuestionAnswer) %>%
summarize(Count = n(), .groups = 'drop')
# Display the summary table
kable(answers_summary[1:10,], caption = "Summary Table of Question Answers by Participant, VideoMode, and VideoName")
# Summarize the average QuestionAnswer for each VideoMode and VideoName
summary_data <- questionData_combined %>%
group_by(VideoName, VideoMode) %>%
summarize(
Mean_Answer = mean(QuestionAnswer, na.rm = TRUE),
SD_Answer = sd(QuestionAnswer, na.rm = TRUE),
Mean_Duration = mean(AnswerDuration, na.rm = TRUE),
SD_Duration = sd(AnswerDuration, na.rm = TRUE),
.groups = "drop"
)
# Display the summarized data
kable(summary_data, caption = "Average QuestionAnswer for each  VideoName")
# Define custom colors for the categories
custom_colors <- c(
"Hallucination" = "#4A1B75", # RGB(74, 27, 117)
"Coupling" = "#1B7A80",      # RGB(27, 122, 128)
"Normal" = "#464640"         # RGB(70, 70, 64)
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer, fill = VideoName)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode and VideoName",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer, fill = VideoMode)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer, fill = VideoName)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode and VideoName",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer, fill = VideoMode)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
deviceData <- deviceDataList[[1]]
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
deviceData <- deviceData[-1, ]
deviceData$RightEyePupilSize[deviceData$RightEyePupilSize == -1] <- NA
deviceData$LeftEyePupilSize[deviceData$LeftEyePupilSize == -1] <- NA
ecg_no_zero <- ecgData %>% filter(EVENT >0)
pdf("EVENT_vs_systemTime.pdf", width = 28, height = 16)  # Adjust width and height as needed
plot(ecg_no_zero$systemTime, ecg_no_zero$EVENT, xlab = "systemTime", ylab = "EVENT",
main = "EVENT vs systemTime", pch = 1, col = "blue")
dev.off()
# Apply approx function to the pupil size columns
deviceData <- deviceData %>%
arrange(systemTime) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
# Create a line plot with smoothing for both eyes
ggplot(deviceData, aes(x = systemTime)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = video_start_ecg, color = "green", size = 0.5, linetype = 4)+
geom_vline(xintercept = video_end_ecg, color = "pink", size = 0.5, linetype = 4)
# Create a line plot with smoothing for both eyes
ggplot(deviceData, aes(x = systemTime)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = video_start_ecg, color = "green", size = 0.5, linetype = 4)+
geom_vline(xintercept = video_end_ecg, color = "pink", size = 0.5, linetype = 4)
deviceData$average_pupil_size <- rowMeans(deviceData[, c("smoothed_right_pupil_size", "smoothed_left_pupil_size")], na.rm = TRUE)
# Create a line plot for the average pupil size
# removed vlines as no spawnData was identified
ggplot(deviceData, aes(x = systemTime, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size")+
geom_vline(xintercept = video_start_ecg, color = "darkgreen", size = 0.5, linetype = 4)+
geom_vline(xintercept = video_end_ecg, color = "red", size = 0.5, linetype = 4)
split_device_data <- list() # List to store split dataframes
# Loop through each pair of start and end times
for (i in seq_along(video_start_ecg)) {
# Filter the dataframe for rows within the start and end times
split_device_data[[i]] <- deviceData %>%
filter(systemTime >= video_start_ecg[i] & systemTime <= video_end_ecg[i])
}
# Optionally, assign names to each dataframe in the list
names(split_device_data) <- paste0("segment_", seq_along(video_start_ecg))
# Example: Access the first split dataframe
segment_1 <- split_device_data[[1]]
# Adjust `systemTime` to start from 0 for each segment
combined_device_data <- bind_rows(
lapply(seq_along(split_device_data), function(i) {
segment <- split_device_data[[i]]
segment$segment <- paste0("Segment ", i) # Add segment identifier
segment$systemTime <- segment$systemTime - video_start_ecg[i] # Adjust systemTime
return(segment)
})
)
# Create the plot
ggplot(combined_device_data, aes(x = systemTime)) +
geom_line(aes(y = smoothed_right_pupil_size, color = "Right Eye"), na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size, color = "Left Eye"), na.rm = TRUE) +
labs(
title = "Smoothed Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Smoothed Pupil Size",
color = "Eye",
) +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red")) +
facet_wrap(~segment, scales = "free_x") +
theme_minimal()
# Create the plot for average pupil size
ggplot(combined_device_data, aes(x = systemTime, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(
title = "Average Pupil Size Over Time for All Segments (Adjusted System Time)",
x = "Adjusted System Time",
y = "Average Pupil Size"
) +
facet_wrap(~segment, scales = "free_x") + # Separate plots for each segment
theme_minimal()
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer, fill = VideoName)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
# Ensure the necessary libraries are loaded
library(here, warn.conflicts = FALSE, quietly=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
library(RColorBrewer)
# Interpolate missing values using linear interpolation for both eyes
library(zoo)
# set working directory
data_dir <- paste0(here())
setwd(data_dir)
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(44)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0("data/", id, "_DeviceData.csv")
questionFileName <- paste0("data/", id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
questionData["Id"] <- id
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
questionData_combined <- bind_rows(questionDataList)
summary(questionData_combined$AnswerDuration)
# Summarize the data
answers_summary <- questionData_combined %>%
group_by(Id, VideoMode, VideoName, QuestionIndex, QuestionAnswer) %>%
summarize(Count = n(), .groups = 'drop')
# Display the summary table
kable(answers_summary[1:10,], caption = "Summary Table of Question Answers by Participant, VideoMode, and VideoName")
# Summarize the average QuestionAnswer for each VideoMode and VideoName
summary_data <- questionData_combined %>%
group_by(VideoName, VideoMode) %>%
summarize(
Mean_Answer = mean(QuestionAnswer, na.rm = TRUE),
SD_Answer = sd(QuestionAnswer, na.rm = TRUE),
Mean_Duration = mean(AnswerDuration, na.rm = TRUE),
SD_Duration = sd(AnswerDuration, na.rm = TRUE),
.groups = "drop"
)
# Display the summarized data
kable(summary_data, caption = "Average QuestionAnswer for each  VideoName")
# Define custom colors for the categories
custom_colors <- c(
"Hallucination" = "#4A1B75", # RGB(74, 27, 117)
"Coupling" = "#1B7A80",      # RGB(27, 122, 128)
"Normal" = "#464640"         # RGB(70, 70, 64)
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer, fill = VideoName)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode and VideoName",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer, fill = VideoName)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode and VideoName",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer)) +
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode and VideoName",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(summary_data, aes(x = VideoMode, y = Mean_Answer)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = Mean_Answer - SD_Answer, ymax = Mean_Answer + SD_Answer),
position = position_dodge(width = 0.8), width = 0.2) +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Mean Question Answer by VideoMode",
x = "Video Mode",
y = "Mean Question Answer"
)
ggplot(questionData_combined, aes(x = VideoMode, y = QuestionAnswer)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) + # Apply custom colors
theme_minimal() +
labs(
title = "Distribution of Question Answers by VideoMode",
x = "Video Mode",
y = "Question Answer"
)
