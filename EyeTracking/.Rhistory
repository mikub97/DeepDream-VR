labs(title="Distribution of Question Answers by VideoName",
x="Question Index",
y="Count",
fill="Question Answer") +
theme_minimal()
deviceData <- read.csv("data/99_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
#explore the differences in columns, maybe I did skipped some?
colnames(deviceData)
df <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
df$relative_time <- (df$systemTime - min(df$systemTime))
df <- df[!duplicated(df$relative_time), ]
df$RightEyePupilSize[df$RightEyePupilSize == -1] <- NA
df$LeftEyePupilSize[df$LeftEyePupilSize == -1] <- NA
# Apply the function to the pupil size columns
df <- df %>%
arrange(relative_time) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
#where movie or its mode changed
movie_changed = where_film_mode_changed(df)
# Create a line plot with smoothing for both eyes
ggplot(df, aes(x = relative_time)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# Calculate the average pupil size
df$average_pupil_size <- rowMeans(df[, c("smoothed_right_pupil_size", "smoothed_left_pupil_size")], na.rm = TRUE)
# Create a line plot for the average pupil size
ggplot(df, aes(x = relative_time, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size") +
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# Ensure the necessary libraries are loaded
library(here, warn.conflicts = FALSE, quietly=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
# Interpolate missing values using linear interpolation for both eyes
library(zoo)
# set working directory
data_dir <- paste0(here())
setwd(data_dir)
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(1, 2)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0("data/", id, "_DeviceData.csv")
questionFileName <- paste0("data/", id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
setwd("C:/Users/mikub/OneDrive - Akademeia Tutorial College sp. z o.o/11/Research projects/DeepDream-VR/EyeTracking")
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(1, 2)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0("data/", id, "_DeviceData.csv")
questionFileName <- paste0("data/", id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
setwd("C:/Users/mikub/OneDrive - Akademeia Tutorial College sp. z o.o/11/Research projects/DeepDream-VR/EyeTracking/pilot_data")
# Initialize lists to store data
deviceDataList <- list()
questionDataList <- list()
# Number of participants
participant_ids <- c(1, 2)
# Loop through each participant
for (id in participant_ids) {
# Generate the file names dynamically
deviceFileName <- paste0("data/", id, "_DeviceData.csv")
questionFileName <- paste0("data/", id, "_QuestionsData.csv")
# Read the CSV files
deviceData <- read.csv(deviceFileName, sep = ";", encoding = "utf-8")
questionData <- read.csv(questionFileName, sep = ";", encoding = "utf-8")
# Append the data to the lists
if (!is.null(deviceData)) deviceDataList[[length(deviceDataList) + 1]] <- deviceData
if (!is.null(questionData)) questionDataList[[length(questionDataList) + 1]] <- questionData
}
questionData_combined <- bind_rows(questionDataList)
deviceData <- read.csv("data/99_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
#explore the differences in columns, maybe I did skipped some?
colnames(deviceData)
df <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
df$relative_time <- (df$systemTime - min(df$systemTime))
df <- df[!duplicated(df$relative_time), ]
df$RightEyePupilSize[df$RightEyePupilSize == -1] <- NA
df$LeftEyePupilSize[df$LeftEyePupilSize == -1] <- NA
# Apply the function to the pupil size columns
df <- df %>%
arrange(relative_time) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
#where movie or its mode changed
movie_changed = where_film_mode_changed(df)
# Create a line plot with smoothing for both eyes
ggplot(df, aes(x = relative_time)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# Calculate the average pupil size
df$average_pupil_size <- rowMeans(df[, c("smoothed_right_pupil_size", "smoothed_left_pupil_size")], na.rm = TRUE)
# Create a line plot for the average pupil size
ggplot(df, aes(x = relative_time, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size") +
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
deviceData <- read.csv("data/1_DeviceData.csv", sep = ";", encoding = "utf-8")
deviceData <- deviceData %>% select_if(~ !any(is.na(.)))
### Rename some columns to fit the code from VR_ET_code.Rmd (sent by PM to MW)
deviceData <- deviceData %>%
rename(
HMDPosition = DevicePosition,
HMDRotation = DeviceRotation,
LeftEyeOpenness = LeftEyeOpeness,
RightEyeOpenness = RightEyeOpeness,
systemTime = ExperimentSecond
)
df <- deviceData %>% select_if(~ !any(is.na(.)))
# Convert the systemTime column to relative time
df$relative_time <- (df$systemTime - min(df$systemTime))
df <- df[!duplicated(df$relative_time), ]
df$RightEyePupilSize[df$RightEyePupilSize == -1] <- NA
df$LeftEyePupilSize[df$LeftEyePupilSize == -1] <- NA
# Apply approx function to the pupil size columns
df <- df %>%
arrange(relative_time) %>%
mutate(
RightEyePupilSize = na_approx_with_padding(RightEyePupilSize),
LeftEyePupilSize = na_approx_with_padding(LeftEyePupilSize),
smoothed_right_pupil_size = zoo::rollmean(RightEyePupilSize, k = 180, fill = NA),
smoothed_left_pupil_size = zoo::rollmean(LeftEyePupilSize, k = 180, fill = NA)
)
# Function that takes deviceData df and returns a frame with rows, when the
# VideoMode/Video changed
where_film_mode_changed <-function(df) {
# Find changes in VideoName
name_changes <- c(FALSE, df$VideoName[-1] != df$VideoName[-nrow(df)])
# Find changes in VideoMode
mode_changes <- c(FALSE, df$VideoMode[-1] != df$VideoMode[-nrow(df)])
# Combine the two logical vectors
changes <- name_changes | mode_changes
# Get the indices where changes occur
change_indices <- which(changes)
changes_rows <- df[change_indices,]
return(changes_rows)
}
#where movie or its mode changed
movie_changed = where_film_mode_changed(df)
# Create a line plot with smoothing for both eyes
ggplot(df, aes(x = relative_time)) +
geom_line(aes(y = smoothed_right_pupil_size), color = "blue", na.rm = TRUE) +
geom_line(aes(y = smoothed_left_pupil_size), color = "red", na.rm = TRUE) +
labs(title = "Smoothed Pupil Size Over Time",
x = "Relative Time", y = "Smoothed Pupil Size",
color = "Eye") +
scale_color_manual(values = c("Right Eye" = "blue", "Left Eye" = "red"))+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4, title = "where movie changed")
# Calculate the average pupil size
df$average_pupil_size <- rowMeans(df[, c("smoothed_right_pupil_size", "smoothed_left_pupil_size")], na.rm = TRUE)
# Create a line plot for the average pupil size
# removed vlines as no spawnData was identified
ggplot(df, aes(x = relative_time, y = average_pupil_size)) +
geom_line(color = "purple") +
labs(title = "Average Pupil Size Over Time",
x = "Relative Time", y = "Average Pupil Size")+
geom_vline(xintercept = movie_changed$relative_time, color = "darkgreen", size = 0.5, linetype = 4)
# +geom_text(data = changes_rows, aes(x = relative_time, y = 0.0, label = changes_rows$VideoName),
# angle = 90, vjust = -0.5, color = "darkgreen", size = 3)
plot(df$systemTime,df$QuestionIndex)
plot(ecgData$EVENT)
plot(result$EVENT)
View(result)
plot(result[[1:100]]$EVENT)
plot(result[[:,1:100]]$EVENT)
result
result[1:1000]
plot(result[[:,1:100]]$EVENT)
head(result,1000)
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
change_rows <- which(ecgData$EVENT == 4 )
result <- ecgData[change_rows, ]
baseTime = df$systemTime[1]
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
ids_shifted = as.numeric(rownames(result))
ids_shifted = ids_shifted - ids_shifted[1]
systemTime_result = (ids_shifted/sampling_rate)+baseTime
result$systemTime <- systemTime_result
change_rows <- which(ecgData$EVENT == 4 )
changed_rows
change_rows <- which(ecgData$EVENT == 4 & dplyr::lead(ecgData$EVENT) == 8)
changed_rows
change_rows
change_rows <- which(ecgData$EVENT == 4)
change_rows
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
head(ecgData,10)
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
# Assuming ecgData has a column called EVENT
result <- ecgData %>%
mutate(change = (EVENT == 8 & lag(EVENT) == 4)) %>%
filter(change == TRUE)
result <- ecgData[change_rows, ]
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
# Assuming ecgData has a column called EVENT
result <- ecgData %>%
mutate(change = (EVENT == 8 & lag(EVENT) == 4)) %>%
filter(change == TRUE)
View(result)
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
# Assuming ecgData has a column called EVENT
result <- ecgData %>%
mutate(change = (EVENT == 4 & lag(EVENT) == 8)) %>%
filter(change == TRUE)
unique(ecgData$EVENT)
View(ecgData)
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
# Assuming ecgData has a column called EVENT
result <- ecgData %>%
mutate(change = (EVENT == 8) %>%
filter(change == TRUE)
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
# Assuming ecgData has a column called EVENT
result <- ecgData %>%
mutate(change = (EVENT == 8)) %>%
filter(change == TRUE)
View(result)
ids_shifted = as.numeric(rownames(ecgData))
ids_shifted
baseTime = df$systemTime[1]
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
ids_shifted = as.numeric(rownames(ecgData))
systemTime_result = (ids_shifted/sampling_rate)+baseTime
ecgData$systemTime <- systemTime_result
# Find the indices of non-zero EVENT values
non_zero_indices <- which(ecgData$EVENT != 0)
# Get the first and last index of non-zero values
first_non_zero <- min(non_zero_indices)
last_non_zero <- max(non_zero_indices)
# Subset the dataframe to keep only the rows between the first and last non-zero indices
ecgData_cleaned <- ecgData[first_non_zero:last_non_zero, ]
baseTime = df$systemTime
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
time_increment <- 1/sampling_rate
rownames(ecgData_cleaned) <- seq_len(nrow(ecgData_cleaned))
ecgData_cleaned$systemTime <- baseTime + seq(0, by = time_increment, length.out = nrow(ecgData_cleaned))
View(ecgData_cleaned)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 8 & lag(EVENT) == 4)) %>%
filter(change == TRUE | lag(change == TRUE))
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 4 & lag(EVENT) == 0)) %>%
filter(change == TRUE | lag(change == TRUE))
View(result)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 4 & lag(EVENT) == 0)) %>%
filter(change == TRUE )
View(result)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 4 & lag(EVENT) == 0)) %>%
filter(change == TRUE | lag(change == TRUE))
View(result)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 4 & lag(EVENT) == 0)) %>%
filter(change == TRUE )
ecgData_cleaned$systemTime[1]
ecgData_cleaned$systemTime[-1]
tail(df$systemtime, 1)
head(ecgData_cleaned,1)
tail(ecgData_cleaned,1)
head(df,1)
head(df,1)$systemTime
tail(df,1)$systemTime
head(ecgData_cleaned,1)
tail(ecgData_cleaned,1)
head(ecgData_cleaned,1)$systemTime
tail(ecgData_cleaned,1)$systemTime
## df is device data, czyli ET, etc.
head(df,1)$systemTime
tail(df,1)$systemTime
head(ecgData_cleaned$systemTime,10)
head(lagged(ecgData_cleaned$systemTime),10)
head(lag(ecgData_cleaned$systemTime),10)
plot(ecgData_cleaned$systemTime)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 8 & lag(EVENT) == 4)) %>%
filter(change == TRUE)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 8 & lag(EVENT) == 4)) %>%
filter(lag(change)== TRUE)
View(ecgData_cleaned)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 8) %>%
filter(change== TRUE)
result <- ecgData_cleaned %>%
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 8))%>%
filter(change== TRUE)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 8))%>%
filter(change== TRUE)
View(result)
View(ecgData_cleaned)
View(ecgData_cleaned)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 8) )%>%
filter(change== TRUE)
View(ecgData_cleaned)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 8) )
View(result)
ecgData <- read.csv("data/1_ECG_Misia_main.csv")
# Find the indices of non-zero EVENT values
non_zero_indices <- which(ecgData$EVENT != 0)
# Get the first and last index of non-zero values
first_non_zero <- min(non_zero_indices)
last_non_zero <- max(non_zero_indices)
# Subset the dataframe to keep only the rows between the first and last non-zero indices
ecgData_cleaned <- ecgData[first_non_zero:last_non_zero, ]
baseTime = df$systemTime[1] # the start of vr session
sampling_rate <- 1000 # 1000 Hz means 1 sample per millisecond
time_increment <- 1/sampling_rate
rownames(ecgData_cleaned) <- seq_len(nrow(ecgData_cleaned))
ecgData_cleaned$systemTime <- baseTime + seq(0, by = time_increment, length.out = nrow(ecgData_cleaned))
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 8) )
View(result)
result <- ecgData %>%
mutate(change = (EVENT == 8 & lag(EVENT) == 4)) %>%
filter(change == TRUE)
result <- ecgData %>%
mutate(change = (EVENT == 4 & lag(EVENT) != 4)) %>%
filter(change == TRUE)
View(result)
result <- ecgData_cleaned %>%
mutate(change = (EVENT == 4 & lag(EVENT) != 4)) %>%
filter(change == TRUE)
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
View(result)
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)$systemTime
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
View(result)
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
video_start <- results %>%
filter(video_star==TRUE)$systemTime
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
video_start <- results %>%
filter(video_star==TRUE)
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
video_start <- result %>%
filter(video_star==TRUE)
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
video_start <- result %>%
filter(video_start==TRUE)
video_end <- result %>%
filter(video_end==TRUE)
View(video_end)
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
video_start <- result %>%
filter(video_start==TRUE)
video_end <- result %>%
filter(video_end==TRUE)
video_start <- video_start$systemTime
video_end <- video_end$systemTime
result <- df %>%
mutate(segment_changed = (SegmentIndex != lag(SegmentIndex))) %>%
filter(segment_changed == TRUE)
View(result)
result <- df %>%
mutate(segment_changed = (SegmentIndex != lag(SegmentIndex))) %>%
filter(segment_changed == TRUE)
segment_change<- result$systemTime
video_start
segment_change
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
video_start <- result %>%
filter(lag(video_start)==TRUE)
video_end <- result %>%
filter(lag(video_end)==TRUE)
video_start <- video_start$systemTime
video_end <- video_end$systemTime
video_start
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(lag(video_start) == TRUE |lag(video_end)==TRUE)
video_start <- result %>%
filter(video_start==TRUE)
video_end <- result %>%
filter(video_end==TRUE)
video_start <- video_start$systemTime
video_end <- video_end$systemTime
video_start
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
video_start <- result %>%
filter(video_start==TRUE)
video_end <- result %>%
filter(video_end==TRUE)
video_start <- video_start$systemTime
video_end <- video_end$systemTime
video_start
segment_change
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT != 4 & lag(EVENT) == 4)) %>%
mutate(video_end = (EVENT != 8 & lag(EVENT) == 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
video_start <- result %>%
filter(video_start==TRUE)
video_end <- result %>%
filter(video_end==TRUE)
video_start <- video_start$systemTime
video_end <- video_end$systemTime
video_start
segment_change
result <- ecgData_cleaned %>%
mutate(video_start = (EVENT == 4 & lag(EVENT) != 4)) %>%
mutate(video_end = (EVENT == 8 & lag(EVENT) != 8)) %>%
filter(video_start == TRUE |video_end==TRUE)
video_start <- result %>%
filter(video_start==TRUE)
video_end <- result %>%
filter(video_end==TRUE)
video_start <- video_start$systemTime
video_end <- video_end$systemTime
